{
  "swagger": "2.0",
  "info": {
    "description": "Bossabox Backend Challenge API",
    "version": "1.0.0",
    "title": "VUTTR API",
    "contact": {
      "email": "orlandosjm@yahoo.com.br"
    },
    "license": {
      "name": "MIT Licence",
      "url": "https://mit-license.org"
    }
  },
  "tags": [
    {
      "name": "users",
      "description": "Operations available to any user"
    },
    {
      "name": "authUsers",
      "description": "Operations available to authenticated users"
    }
  ],
  "paths": {
    "/users": {
      "get": {
          "tags": [
            "authUsers"
          ],
          "summary": "searches users",
          "operationId": "searchUsers",
          "description": "You can search for all available users in the system",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "in": "none",
              "description": "No parameter is required"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref":"#/definitions/usersGetRes"
              }
            },
            "401": {
              "description": "Unauthorized (User not logged in)"
            },
            "500": {
              "description": "Internal server error"
            }
          }
      },
      "post": {
        "tags": [
          "users"
        ],
        "summary": "adds an user",
        "operationId": "addUser",
        "description": "Adds an user to the system",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "user",
            "description": "User to add",
            "schema": {
              "$ref": "#/definitions/userPostReq"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created. The response always returns the parameter 'avatar_name' set as null. This parameter can be set later in 'put:users' method.",
            "schema": {
              "$ref": "#/definitions/userPostRes"
            }
          },
          "400": {
            "description": "Bad request, Field is required (if any field is missing), Password must be at least 6 digits long, Email has been already used (Email must be unique)"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/users:id":{
      "get": {
          "tags": [
            "authUsers"
          ],
          "summary": "searches an user",
          "operationId": "searchUser",
          "description": "You can search a specific user in the system",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "in": "path",
              "name": "id",
              "description": "The user's id"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref":"#/definitions/userGetRes"
              }
            },
            "400": {
              "description": "Bad request. Invalid id"
            },
            "401": {
              "description": "Unauthorized (User not logged in)"
            },
            "500": {
              "description": "Internal server error"
            }
          }
      },
      "put": {
        "tags": [
          "authUsers"
        ],
        "summary": "Updates an user (name, email, password)",
        "operationId": "updateUser",
        "description": "An user can update his/her own data. If oldPassword field is filled, API will save password as the new one.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The user's id"
          },
          {
            "in": "body",
            "name": "user",
            "description": "New user's data. User can either update name and email or name, email and password. The first case you send an object {name(optional), email(optional), password}. API will check for password and save data. The second case you send an object {name(optional), email(optional), oldPassword, password, confirmPassword}. API will check for the oldPassword and save the password field as the new password",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/userPutRes"
                },
                {
                  "$ref": "#/definitions/userPutReq"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/userPutRes"
            }
          },
          "400": {
            "description": "Bad request. Invalid id. Name and email are required. Password's validation failed. Email already exists."
          },
          "401": {
            "description": "Unauthorized (User not logged in), Invalid password"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/sessions": {
      "post": {
        "tags": [
          "users"
        ],
        "summary": "creates an user's session",
        "operationId": "addSession",
        "description": "Let an user be authenticated",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "session",
            "description": "User to login",
            "schema": {
              "$ref": "#/definitions/sessionPostReq"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "item created",
            "schema": {
              "$ref": "#/definitions/sessionPostRes"
            }
          },
          "400": {
            "description": "Bad request. Email and password are required"
          },
          "401": {
            "description": "Incorrect password"
          },
          "404": {
            "description": "User not found (for a wrong email)"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/tools": {
      "get": {
          "tags": [
            "authUsers"
          ],
          "summary": "searches tools",
          "operationId": "searchTool",
          "description": "You can search for either all available tools in the system or for tools by a specific tag",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "in": "query",
              "name": "tool",
              "description": "Optional. /tools?tag=node",
              "schema": {
                "type":"string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref":"#/definitions/toolsGetRes"
              }
            },
            "401": {
              "description": "Unauthorized (User not logged in)"
            },
            "500": {
              "description": "Internal server error"
            }
          }
      },
      "post": {
        "tags": [
          "authUsers"
        ],
        "summary": "adds a tool",
        "operationId": "addUser",
        "description": "Adds a tool to the system",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "tool",
            "description": "Tool to add",
            "schema": {
              "$ref": "#/definitions/toolPostReq"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/toolPostRes"
            }
          },
          "400": {
            "description": "Bad request, Field is required (if any field is missing), At least one tag is requeired"
          },
          "401": {
            "description": "Unauthorized (User not logged in)"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/tools:id": {
      "delete": {
        "tags": [
          "authUsers"
        ],
        "summary": "Deletes a tool",
        "operationId": "deleteTool",
        "description": "Deletes a tool in the system",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The tool's id"
          }
        ],
        "responses": {
          "204": {
            "description": "No content"
          },
          "400": {
            "description": "Invalid id"
          },
          "401": {
            "description": "Unauthorized (User not logged in)"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "get": {
          "tags": [
            "authUsers"
          ],
          "summary": "searches a tool",
          "operationId": "searchATool",
          "description": "You can search for a specific tool in the system or for tools by a specific tag",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "in": "path",
              "name": "id",
              "description": "The tool's id"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref":"#/definitions/toolGetRes"
              }
            },
            "400": {
              "description": "Invalid id"
            },
            "401": {
              "description": "Unauthorized (User not logged in)"
            },
            "500": {
              "description": "Internal server error"
            }
          }
      }
    },
    "tags": {
      "get": {
          "tags": [
            "authUsers"
          ],
          "summary": "searches tags",
          "operationId": "searchTags",
          "description": "You can search for all available tags in the system",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "in": "none",
              "description": "No parameter is required"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref":"#/definitions/tagsGetRes"
              }
            },
            "401": {
              "description": "Unauthorized (User not logged in)"
            },
            "500": {
              "description": "Internal server error"
            }
          }
      }
    }
  },
  "definitions": {
    "sessionPostReq": {
      "type": "object",
      "required": [
        "email",
        "password"
      ],
      "properties": {
        "email": {
          "type": "string",
          "example": "willHenry@gmail.com"
        },
        "password": {
          "type": "string",
          "example": "123456"
        }
      }
    },
    "sessionPostRes": {
      "type": "object",
      "required": [
        "id",
        "name",
        "email",
        "avatar_name",
        "token"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "example": "1"
        },
        "name": {
          "type": "string",
          "example": "William Henry"
        },
        "email": {
          "type": "string",
          "example": "willHenry@gmail.com"
        },
        "avatar_name": {
          "type": "string",
          "example": "man1"
        },
        "token": {
          "type": "string",
          "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MiwiaWF0IjoxNTg1NTAzNzY1LCJleHAiOjE1ODYxMDg1NjV9.xE-qRi3XX5Ge5h_FN7RCIGmwKFnzVZvSbdJQBV-88Co"
        }
      }
    },
    "userPostReq": {
      "type": "object",
      "required": [
        "name",
        "email",
        "password"
      ],
      "properties": {
        "name": {
          "type": "string",
          "example": "William Henry"
        },
        "email": {
          "type": "string",
          "example": "willHenry@gmail.com"
        },
        "password": {
          "type": "string",
          "example": "123456"
        }
      }
    },
    "userPostRes": {
      "type": "object",
      "required": [
        "id",
        "name",
        "email",
        "avatar_name"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "example": "1"
        },
        "name": {
          "type": "string",
          "example": "William Henry"
        },
        "email": {
          "type": "string",
          "example": "willHenry@gmail.com"
        },
        "avatar_name": {
          "type": "string",
          "example": null
        }
      }
    },
    "userPutReq": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "name": {"type":"string"},
          "email": {"type":"string"},
          "oldPassword": {"type":"string"},
          "password": {"type":"string"},
          "confirmPassword": {"type":"string"}
        }
      },
      "example": [
        {
          "name": "William Henry",
          "email": "willHenry@gmail.com",
          "password": "123456"
        },
        {
          "oldPassword": "123456",
          "password": "142857",
          "confirmPassword": "142857"
        }
      ]
    },
    "userPutRes": {
      "type": "object",
      "required": [
        "id",
        "name",
        "email",
        "avatar_name"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "example": "1"
        },
        "name": {
          "type": "string",
          "example": "William Henry"
        },
        "email": {
          "type": "string",
          "example": "willHenry@gmail.com"
        },
        "avatar_name": {
          "type": "string",
          "example": "man2"
        }
      }
    },
    "usersGetRes": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "id": {"type":"integer"},
          "name": {"type":"string"},
          "email": {"type":"string"},
          "avatar_name": {"type":"string"}
        }
      },
      "example": [
        {
          "id":1,
          "name": "William Henry",
          "email": "willHenry@gmail.com",
          "avatar_name": null
        },
        {
          "id":2,
          "name": "Bill Gates",
          "email": "billG@hotmail.com",
          "avatar_name": "man2"
        }
      ]
    },
    "userGetRes": {
      "type": "object",
      "required": [
        "id",
        "name",
        "email",
        "avatar_name"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "example": 1
        },
        "name": {
          "type": "string",
          "example": "William Henry"
        },
        "email": {
          "type": "string",
          "example": "willHenry@gmail.com"
        },
        "avatar_name": {
          "type": "string",
          "example": "man1"
        }
      }
    },
    "toolPostReq": {
      "type": "object",
      "required": [
        "title",
        "link",
        "description",
        "tags"
      ],
      "properties": {
        "title": {
          "type": "string",
          "example": "hotel"
        },
        "link": {
          "type": "string",
          "example": "https://github.com/typicode/hotel"
        },
        "description": {
          "type": "string",
          "example": "Local app manager. Start apps within your browser, developer tool with local .localhost domain and https out of the box."
        },
        "tags": {
          "type": "array",
          "itens": {
            "type":"string"
          },
          "example": ["node", "organizing", "webapps", "domain", "developer", "https", "proxy"]
        }
      }
    },
    "toolPostRes": {
      "type": "object",
      "required": [
        "id",
        "title",
        "link",
        "description",
        "tags"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "example": 5
        },
        "title": {
          "type": "string",
          "example": "hotel"
        },
        "link": {
          "type": "string",
          "example": "https://github.com/typicode/hotel"
        },
        "description": {
          "type": "string",
          "example": "Local app manager. Start apps within your browser, developer tool with local .localhost domain and https out of the box."
        },
        "tags": {
          "type": "array",
          "itens": {
            "type":"string"
          },
          "example": ["node", "organizing", "webapps", "domain", "developer", "https", "proxy"]
        }
      }
    },
    "toolsGetRes": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "id": {"type":"integer"},
          "title": {"type":"string"},
          "link": {"type":"string"},
          "description": {"type":"string"},
          "tags": {
            "type":"string",
            "itens": {
              "type":"string"
            }
          }
        }
      },
      "example": [
        {
          "id": 2,
          "title": "json-server",
          "link": "https://github.com/typicode/json-server",
          "description": "Fake REST API based on a json schema. Useful for mocking and creating APIs for front-end devs to consume in coding challenges.",
          "tags": [
              "api",
              "json",
              "schema",
              "node",
              "github",
              "rest"
          ]
      },
      {
          "id": 3,
          "title": "fastify",
          "link": "https://www.fastify.io/",
          "description": "Extremely fast and simple, low-overhead web framework for NodeJS. Supports HTTP2.",
          "tags": [
              "web",
              "framework",
              "node",
              "http2",
              "https",
              "localhost"
          ]
      }
      ]
    },
    "toolGetRes": {
      "type": "object",
        "properties": {
          "id": {"type":"integer"},
          "title": {"type":"string"},
          "link": {"type":"string"},
          "description": {"type":"string"},
          "tags": {
            "type":"string",
            "itens": {
              "type":"string"
            }
          }
        },
      "example": {
      "id": 2,
      "title": "json-server",
      "link": "https://github.com/typicode/json-server",
      "description": "Fake REST API based on a json schema. Useful for mocking and creating APIs for front-end devs to consume in coding challenges.",
      "tags": [
          "api",
          "json",
          "schema",
          "node",
          "github",
          "rest"
      ]
    }
    },
    "tagsGetRes": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "id": {"type":"integer"},
          "title": {"type":"string"}
        }
      },
      "example": [
        {
          "id": 2,
          "title": "json"
        },
        {
            "id": 3,
            "title": "node"
        }
      ]
    }
  }
}
